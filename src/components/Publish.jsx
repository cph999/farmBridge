import React, { useEffect, useState } from 'react';
import "./Publish.css";
import { Tabs, Input, Button, Card, Image, Toast, Space, Flex, List, PullRefresh } from 'react-vant';
import { Search, Arrow, PhoneO } from '@react-vant/icons';

import instance from '../utils/api';

const Publish = () => {
    const [tabsList] = useState(["ÂÖ®ÈÉ®", "Áâõ", "Áæä", "Áå™", "È∏≠"]);
    const [currentTab, setCurrentTab] = useState(0);
    const [search, setSearch] = useState("");
    const [pageNum, setPageNum] = useState(1);
    const [pageSize] = useState(10);
    const [list, setList] = useState([]);
    const [finished, setFinished] = useState(false);
    const [isOver, setIsOver] = useState(false);

    const onLoadRefresh = async (isRefresh) => {
        if (isOver) return; // Â¶ÇÊûúÂ∑≤ÁªèÊ≤°ÊúâÊõ¥Â§öÊï∞ÊçÆÔºåÁõ¥Êé•ËøîÂõû
        const nextPage = isRefresh ? 1 : pageNum;
        if (!isRefresh) setPageNum(prev => prev + 1);

        const res = await queryPost(nextPage);
        const data = res.data.datas || [];

        if (data.length === 0) {
            setIsOver(true); // Â¶ÇÊûúÊ≤°ÊúâÊï∞ÊçÆËøîÂõûÔºåËØ¥ÊòéÊ≤°ÊúâÊõ¥Â§öÊï∞ÊçÆ
            setFinished(true);
        } else {
            setList(prev => isRefresh ? data : [...prev, ...data]);
            if (data.length < pageSize) {
                setIsOver(true); // Â¶ÇÊûúÊï∞ÊçÆÈáèÂ∞è‰∫éÈ°µÂ§ßÂ∞èÔºåË°®Á§∫Ê≤°ÊúâÊõ¥Â§öÊï∞ÊçÆ
                setFinished(true);
            }
        }
    };

    const queryPost = async (page) => {
        return await instance.post("/getPostList", { search, categoryCode: currentTab, pageNum: page, pageSize });
    };

    useEffect(() => {
        const fetchData = async () => {
            setList([]); // ÂàáÊç¢ Tab Êó∂Ê∏ÖÁ©∫ÂàóË°®
            setIsOver(false); // ÈáçÁΩÆ isOver Áä∂ÊÄÅ
            setFinished(false); // ÈáçÁΩÆ finished Áä∂ÊÄÅ
            await onLoadRefresh(true); // ÈáçÊñ∞Âä†ËΩΩÊï∞ÊçÆ
        };
        fetchData();
    }, [currentTab]);

    const onRefresh = async () => {
        setIsOver(false);
        setFinished(false);
        setPageNum(1);
        await onLoadRefresh(true);
    };

    const handleSearch = async () => {
        setList([]); // Ê∏ÖÁ©∫ÂàóË°®
        setIsOver(false); // ÈáçÁΩÆ isOver
        setFinished(false); // ÈáçÁΩÆ finished
        setPageNum(1); // ÈáçÁΩÆÈ°µÁ†Å
        await onLoadRefresh(true); // ÈáçÊñ∞Âä†ËΩΩÊï∞ÊçÆ
    };

    return (
        <div className='publish-container'>
            <div className='header-container'>
                <Input
                    prefix="üíÅ"
                    value={search}
                    onChange={e => setSearch(e)}
                    suffix={<Search fontSize="2em" onClick={handleSearch} />}
                    placeholder="ÊêúÁ¥¢ÊÇ®ÊÑüÂÖ¥Ë∂£ÁöÑÂìÅÁ±ª"
                />
                <Tabs onChange={(e) => { setCurrentTab(e); setPageNum(1) }}>
                    {tabsList.map((item, index) => (
                        <Tabs.TabPane key={index} title={item} />
                    ))}
                </Tabs>
            </div>

            <div className='body-container'>
                <PullRefresh onRefresh={onRefresh}>
                    <List finished={finished} onLoad={() => onLoadRefresh(false)}>
                        <Flex wrap="wrap" gutter={20}>
                            {list.map((item, i) => (
                                <Flex.Item key={i} span={12} className='item-box'>
                                    <Card round>
                                        <Card.Cover onClick={() => Toast.info('ÁÇπÂáª‰∫ÜCoverÂå∫Âüü')}>
                                            <Image src={item.images} style={{ width: '100%', height: '15vh', objectFit: 'cover' }} />
                                        </Card.Cover>
                                        <Card.Header
                                            extra={<Arrow />}
                                            onClick={() => Toast.info('ÁÇπÂáª‰∫ÜHeaderÂå∫Âüü')}
                                        >
                                            {item.description}
                                        </Card.Header>
                                        <Card.Body onClick={() => Toast.info('ÁÇπÂáª‰∫ÜBodyÂå∫Âüü')}>
                                            {item.locationInfo}
                                        </Card.Body>
                                        <Card.Footer>
                                            <Space>
                                                <Button
                                                    icon={<PhoneO />}
                                                    round
                                                    color='linear-gradient(to right, #ff6034, #ee0a24)'
                                                    size='small'
                                                >
                                                    Âú®Á∫øËÅîÁ≥ª
                                                </Button>
                                            </Space>
                                        </Card.Footer>
                                    </Card>
                                </Flex.Item>
                            ))}
                        </Flex>
                    </List>
                </PullRefresh>
            </div>
        </div>
    );
};

export default Publish;
